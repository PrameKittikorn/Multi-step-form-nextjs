"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getPreloadableFonts", {
    enumerable: true,
    get: function() {
        return getPreloadableFonts;
    }
});
function getPreloadableFonts(clientReferenceManifest, nextFontManifest, filePath, injectedFontPreloadTags) {
    if (!nextFontManifest || !filePath) {
        return null;
    }
    const filepathWithoutExtension = filePath.replace(/\.[^.]+$/, "");
    const entryCSS = clientReferenceManifest.entryCSSFiles[filepathWithoutExtension];
    if (!entryCSS) {
        return null;
    }
    const fontFiles = new Set();
    let foundFontUsage = false;
    for (const cssModules of entryCSS.modules){
        const preloadedFontFiles = nextFontManifest.app[cssModules];
        if (preloadedFontFiles) {
            foundFontUsage = true;
            for (const fontFile of preloadedFontFiles){
                if (!injectedFontPreloadTags.has(fontFile)) {
                    fontFiles.add(fontFile);
                    injectedFontPreloadTags.add(fontFile);
                }
            }
        }
    }
    if (fontFiles.size) {
        return [
            ...fontFiles
        ].sort();
    } else if (foundFontUsage && injectedFontPreloadTags.size === 0) {
        return [];
    } else {
        return null;
    }
}

//# sourceMappingURL=get-preloadable-fonts.js.map